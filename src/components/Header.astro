---
import type { HTMLAttributes } from 'astro/types'
import Wrapper from './Wrapper.astro';
import Logo from './Logo.astro';
import MobileMenuBtn from './Nav/MobileMenuBtn.astro';
import NavCTALink from './Nav/NavCTALink.astro';
import NavLinks from './Nav/NavLinks.astro';
import ContactLinks from './Nav/ContactLinks.astro';

interface Props extends HTMLAttributes<'header'> {

    variant? : 'relative' | 'sticky' | 'fixed',

    toggleTransparencyOnScroll? : boolean,

    class? : string,

    /**
     * @extends <header>
     * @prop variant? : 'relative' | 'sticky' | 'fixed'
     * @prop toggleTransparencyOnScroll? : boolean,
     * @prop class? : string,
     */
    props? : true
}



const {
    variant = 'relative',
    toggleTransparencyOnScroll = false,
    class: className
} = Astro.props

---


{/**
 * NavBar ordering
 * 
 * Mobile
 * 1. Logo
 * 2. CTA
 * 3. MobileMenuBtn
 * 4. <nav></nav>
 * 
 * Desktop
 * 1. Logo
 * 2. <nav></nav>
 * 3. CTA
 * 
 */}



{/**
 * data-toggleTransparencyOnScroll, data-element, and hasColorBg/hasTransparentBg class  
 * are used to toggle the header Bg transparency on Scroll, usually in a hero section 
 */}

<header
    data-toggleTransparencyOnScroll={toggleTransparencyOnScroll ? 'true' : 'false'}
    data-element="header-main"
    class:list={[
        `${toggleTransparencyOnScroll ? 'hasTransparentBg' : 'hasColorBg'}`,
        `${variant === 'relative' ? 'relative' : ''}`,
        `${variant === 'sticky' ? 'sticky top-0 z-[999]' : ''}`,
        `${variant === 'fixed' ? 'fixed top-0 left-0 right-0 z-[999]' : ''}`,
        className
    ]}
>


    <ContactLinks />



    <Wrapper width='max' padding='inline'>


        <div class="nav-wrapper">

            <div class="order-1 mr-auto">
                <Logo />
            </div>

            <div class="order-2  lg:order-3 flex items-center gap-4">
                <NavCTALink icon="how_to_reg" />
                <a href="https://www.facebook.com/EliteHomestay" target="_blank" class="hover:text-primary-500">
                    <svg 
                        class="hidden sm:inline-block"
                        width="24" 
                        height="24" 
                        viewBox="0 0 24 24" 
                        fill="none"
                    >
                        <path d="M23.04 0H0.96C0.429 0 0 0.429 0 0.96V23.04C0 23.571 0.429 24 0.96 24H23.04C23.571 24 24 23.571 24 23.04V0.96C24 0.429 23.571 0 23.04 0ZM22.08 22.08H16.557V14.706H19.677L20.145 11.085H16.557V8.772C16.557 7.722 16.848 7.008 18.351 7.008H20.268V3.768C19.935 3.723 18.798 3.624 17.472 3.624C14.706 3.624 12.813 5.313 12.813 8.412V11.082H9.687V14.703H12.816V22.08H1.92V1.92H22.08V22.08Z" fill="currentColor"/>
                    </svg>
                </a>
            </div>
            
            <div class="order-3 lg:hidden flex items-center">
                <MobileMenuBtn />
            </div>
            
            <nav class="order-4 lg:order-2 relative flex items-start gap-4 w-full lg:w-auto">
                <NavLinks />
            </nav>


        </div>
        

    </Wrapper>


</header>





<style is:global>

header {
    transition: all 250ms;
}

header.hasTransparentBg {
    background-color: transparent;
    color : var(--nav-bar-transparent-text-color);
}

header.hasColorBg {
    background-color: var(--nav-bar-bg-color);
    color : var(--nav-bar-text-color);
}

.nav-wrapper {
    display : flex;
    align-items: center;
    column-gap:  1rem;
    flex-wrap: wrap;
    padding-block : 0.5rem;
}

    
</style>

<style is:global>
    
/* This is for when mobile menu is open when user is over hero section. */
.mobile-menu-is-open header,
header:has( nav a:focus ) {
    background-color: var(--nav-bar-bg-color) !important;
    color : var(--nav-bar-text-color) !important;
}

</style>


<script>


const header = document.querySelector('[data-element="header-main"]') as HTMLDivElement
const hero  = document.querySelector('[data-element="hero"]') as HTMLDivElement


if( header.dataset.toggletransparencyonscroll === 'true' ) {

    const heroObserverOptions = {
        root : null,
        threshold : 0,
        rootMargin : "-70% 0px 0px 0px"
    }
    
    const heroObserver = new IntersectionObserver( entries => {
        entries.forEach(entry => {
    
            if(entry.isIntersecting) {
                header.classList.add('hasTransparentBg')
                header.classList.remove('hasColorBg')
            } else {
                header.classList.remove('hasTransparentBg')
                header.classList.add('hasColorBg')
            }
            
        })
    }, heroObserverOptions)
    
    heroObserver.observe(hero)
}

</script>

